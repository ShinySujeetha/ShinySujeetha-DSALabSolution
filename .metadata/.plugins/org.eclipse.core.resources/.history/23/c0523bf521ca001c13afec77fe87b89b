package com.gl.javafsd.lab3.Brackets;
import java.util.Set;
import java.util.Iterator;
import java.util.LinkedHashSet;

public class BalancedBracketsChecker {
	private static Object preDefinedBrackets;
	private String brackets;
	
	public BalancedBracketsChecker(String brackets) {
		this.brackets = brackets;
	}
	
	public static Set<Character> getOpenBrackets(){
		Set<Character> result=new LinkedHashSet<Character>();
		Iterator<Brackets> iterator=preDefinedBrackets.iterator();
		
		while(iterator.hasNext()) {
			Brackets brackets=iterator.next();
			result.add(brackets.getCloseBracket());	
		}
		return result;		
	}
	
	public static Set<Character> getCloseBrackets(){
		Set<Character> result=new LinkedHashSet<Character>();
		Iterator<Brackets> iterator=preDefinedBrackets.iterator();
		
		while(iterator.hasNext()) {
			Brackets brackets=iterator.next();
			result.add(brackets.getCloseBracket());	
		}
		return result;		
	}
	
	public static Brackets getBrackets(Character closeBracket) {
		for (Brackets preDefinedBracket:preDefinedBrackets) {
			if(preDefinedBracket.getCloseBracket().equals(closeBracket))
				return preDefinedBracket;
		}
		return null;
	}
	
	public boolean check(){
		if(brackets.length()%2!=0)
			return false;
	}
	
	Stack <Character> stack=new Stack<Character>();
	Set <Character> openBracketsSet = BracketsManager.getOpenBrackets();
	Set <Character> closeBracketsSet = BracketsManager.getCloseBrackets();
	
	for(int i=0;i<brackets.length();i++) {
		char aChar = brackets.charAt(i);
		if(openBracketsSet)
	}
	

}
